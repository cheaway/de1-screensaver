# Unsplash Coffee Screensaver plugin for the Decent DE1 app
# This plugin fetches random coffee-themed imagery from Unsplash and displays it
# full-screen as a simple screensaver cycle. Images are refreshed on an interval
# that can be configured alongside the Unsplash search term and access key.

namespace eval ::plugins::coffee_screensaver {
    variable version "1.0.0"
    variable author "Che Schneider"
    variable contact "che.schneider@gmail.com"
    variable name "Dynamic Coffee Screensaver"
    variable description "Displays random coffee photos from a configurable URL as the idle screensaver."
    variable base_dir ""
    variable cache_dir ""
    variable refresh_timer ""
    variable refresh_interval_ms [expr {5 * 60 * 1000}]
    variable running 0
    variable photo_image ""
    variable canvas_path ""
    variable metadata {}
    variable search_term "coffee"
    variable http_registered 0
    variable settings_loaded 0
    array set settings {
        api_key ""
        search_term "coffee"
        refresh_minutes 5.0
    }
}

proc ::plugins::coffee_screensaver::main {} {
    set plugin_dir "[plugin_directory]/coffee_screensaver"
    ::plugins::coffee_screensaver::init $plugin_dir
    return 1
}

proc ::plugins::coffee_screensaver::unload {} {
    ::plugins::coffee_screensaver::stop
}


proc ::plugins::coffee_screensaver::tr {text} {
    if {[info commands translate] ne ""} {
        return [translate $text]
    }
    return $text
}

proc ::plugins::coffee_screensaver::init {plugin_dir} {
    variable base_dir
    variable cache_dir

    set base_dir $plugin_dir
    set cache_dir [file join $plugin_dir "cache"]
    if {![file exists $cache_dir]} {
        file mkdir $cache_dir
    }

    ::plugins::coffee_screensaver::setup_http
    ::plugins::coffee_screensaver::ensure_settings_loaded

    return 1
}

proc ::plugins::coffee_screensaver::preload {} {
    # Prepare configuration UI if DGUI is available.
    if {[info commands plugins] eq ""} {
        return ""
    }
    if {![plugins available DGUI]} {
        return ""
    }

    plugins preload DGUI
    ::plugins::coffee_screensaver::CFG::setup_ui
    return "::plugins::coffee_screensaver::CFG"
}

proc ::plugins::coffee_screensaver::plugin_info {} {
    return [dict create \
        name "Unsplash Coffee Screensaver" \
        version $::plugins::coffee_screensaver::version \
        description "Displays a rotating Unsplash coffee photo as the screensaver." \
        author "Generated by Codex" \
        requires "Unsplash API key"
    ]
}

proc ::plugins::coffee_screensaver::setup_http {} {
    variable http_registered
    if {$http_registered} {
        return
    }

    if {[catch {package require http} err]} {
        error "Unable to load http package: $err"
    }
    if {[catch {package require tls}]} {
        puts stderr "[coffee_screensaver] Warning: tls package not available; Unsplash fetches may fail"
    } else {
        ::http::register https 443 ::tls::socket
    }

    ::http::config -useragent "DE1 Unsplash Screensaver/1.1"

    set http_registered 1
}

proc ::plugins::coffee_screensaver::ensure_settings_loaded {} {
    variable settings_loaded
    if {$settings_loaded} {
        return
    }

    if {[info commands load_plugin_settings] ne ""} {
        catch {load_plugin_settings coffee_screensaver}
    } else {
        ::plugins::coffee_screensaver::read_settings_file
    }

    ::plugins::coffee_screensaver::check_settings
    ::plugins::coffee_screensaver::apply_settings
    set settings_loaded 1
}

proc ::plugins::coffee_screensaver::check_settings {} {
    variable settings

    foreach {key default} {api_key "" search_term "coffee" refresh_minutes 5.0} {
        if {![info exists settings($key)] || $settings($key) eq ""} {
            set settings($key) $default
        }
    }
}

proc ::plugins::coffee_screensaver::normalize_minutes {value} {
    if {[string is double -strict $value]} {
        set minutes [expr {double($value)}]
    } else {
        set minutes 5.0
    }
    if {$minutes < 0.5} {
        set minutes 0.5
    }
    return $minutes
}

proc ::plugins::coffee_screensaver::apply_settings {} {
    variable settings
    variable search_term
    variable refresh_interval_ms

    set search [string trim $settings(search_term)]
    if {$search eq ""} {
        set search "coffee"
    }
    set settings(search_term) $search
    set search_term $search

    set minutes [::plugins::coffee_screensaver::normalize_minutes $settings(refresh_minutes)]
    set settings(refresh_minutes) $minutes
    set refresh_interval_ms [expr {round($minutes * 60 * 1000)}]
}

proc ::plugins::coffee_screensaver::settings_file_path {} {
    variable base_dir
    if {$base_dir eq ""} {
        return ""
    }
    return [file join $base_dir "settings.tcl"]
}

proc ::plugins::coffee_screensaver::read_settings_file {} {
    set path [::plugins::coffee_screensaver::settings_file_path]
    if {$path eq "" || ![file exists $path]} {
        return
    }
    if {[catch {source $path} err]} {
        puts stderr "[coffee_screensaver] Failed to read settings file: $err"
    }
}

proc ::plugins::coffee_screensaver::write_settings_file {} {
    variable settings
    set path [::plugins::coffee_screensaver::settings_file_path]
    if {$path eq ""} {
        return
    }
    set script "namespace eval ::plugins::coffee_screensaver { array set settings {[array get settings]} }\n"
    if {[catch {
        set fh [open $path w]
        puts $fh $script
        close $fh
    } err]} {
        puts stderr "[coffee_screensaver] Failed to write settings file: $err"
    }
}

proc ::plugins::coffee_screensaver::persist_settings {} {
    if {[info commands save_plugin_settings] ne ""} {
        catch {save_plugin_settings coffee_screensaver}
    } else {
        ::plugins::coffee_screensaver::write_settings_file
    }
}

proc ::plugins::coffee_screensaver::settings_updated {} {
    variable running

    ::plugins::coffee_screensaver::apply_settings
    ::plugins::coffee_screensaver::persist_settings

    if {$running} {
        ::plugins::coffee_screensaver::refresh_image
    }
}

proc ::plugins::coffee_screensaver::start {} {
    variable running
    if {$running} {
        return
    }
    set running 1
    ::plugins::coffee_screensaver::refresh_image
    ::plugins::coffee_screensaver::schedule_refresh
}

proc ::plugins::coffee_screensaver::stop {} {
    variable running
    if {!$running} {
        return
    }
    set running 0
    ::plugins::coffee_screensaver::cancel_refresh
    ::plugins::coffee_screensaver::hide
}

proc ::plugins::coffee_screensaver::schedule_refresh {} {
    variable refresh_timer
    variable refresh_interval_ms

    ::plugins::coffee_screensaver::cancel_refresh
    set refresh_timer [after $refresh_interval_ms ::plugins::coffee_screensaver::refresh_image]
}

proc ::plugins::coffee_screensaver::cancel_refresh {} {
    variable refresh_timer
    if {$refresh_timer ne ""} {
        catch {after cancel $refresh_timer}
        set refresh_timer ""
    }
}

proc ::plugins::coffee_screensaver::refresh_image {} {
    ::plugins::coffee_screensaver::ensure_settings_loaded

    set api_key [::plugins::coffee_screensaver::resolve_api_key]
    if {$api_key eq ""} {
        puts stderr "[coffee_screensaver] Unable to refresh image: Unsplash access key not set"
        return
    }

    if {[catch {::plugins::coffee_screensaver::fetch_random_image $api_key} result]} {
        puts stderr "[coffee_screensaver] Failed to fetch random image: $result"
        return
    }

    lassign $result image_path metadata
    ::plugins::coffee_screensaver::render_image $image_path $metadata
    ::plugins::coffee_screensaver::schedule_refresh
}

proc ::plugins::coffee_screensaver::resolve_api_key {} {
    variable settings
    if {[info exists settings(api_key)] && $settings(api_key) ne ""} {
        return $settings(api_key)
    }
    if {[info exists ::env(UNSPLASH_ACCESS_KEY)]} {
        return $::env(UNSPLASH_ACCESS_KEY)
    }
    return ""
}

proc ::plugins::coffee_screensaver::fetch_random_image {api_key} {
    variable search_term
    variable cache_dir

    set endpoint "https://api.unsplash.com/photos/random"
    set query [::http::formatQuery query $search_term orientation landscape count 1]
    set headers [list Authorization "Client-ID $api_key" Accept-Version "v1" Accept "application/json"]

    set token [::http::geturl "$endpoint?$query" -headers $headers -timeout 30000]
    try {
        if {[::http::status $token] ne "ok"} {
            error "HTTP [::http::code $token]"
        }
        set body [::http::data $token]
    } finally {
        ::http::cleanup $token
    }

    if {[catch {package require json} err]} {
        error "Unable to load json package: $err"
    }

    set parsed [::json::json2dict $body]
    if {[catch {dict size $parsed}]} {
        set photo_dict [lindex $parsed 0]
    } else {
        set photo_dict $parsed
    }

    if {![dict exists $photo_dict urls regular]} {
        error "Unexpected JSON payload from Unsplash"
    }
    set image_url [dict get $photo_dict urls regular]

    set file_name [format "unsplash_%s.jpg" [dict get $photo_dict id]]
    set image_path [file join $cache_dir $file_name]

    ::plugins::coffee_screensaver::download_binary $image_url $image_path

    return [list $image_path $photo_dict]
}

proc ::plugins::coffee_screensaver::download_binary {url destination} {
    set token [::http::geturl $url -binary 1 -timeout 60000]
    try {
        if {[::http::status $token] ne "ok"} {
            error "HTTP [::http::code $token]"
        }
        set data [::http::data $token]
    } finally {
        ::http::cleanup $token
    }

    if {[catch {
        set fh [open $destination w+b]
        fconfigure $fh -translation binary
        puts -nonewline $fh $data
        close $fh
    } err]} {
        error $err
    }
}

proc ::plugins::coffee_screensaver::render_image {image_path photo_metadata} {
    variable photo_image
    variable canvas_path
    variable metadata

    set metadata $photo_metadata

    if {$photo_image eq "" || ![image exists $photo_image]} {
        set photo_image [image create photo -name ::plugins::coffee_screensaver::photo]
    }

    if {[catch {$photo_image configure -file $image_path} err]} {
        puts stderr "[coffee_screensaver] Unable to load downloaded image: $err"
        return
    }

    if {$canvas_path eq "" || ![winfo exists $canvas_path]} {
        ::plugins::coffee_screensaver::show
    }

    if {$canvas_path eq "" || ![winfo exists $canvas_path]} {
        puts stderr "[coffee_screensaver] Canvas not available; cannot render image"
        return
    }

    set screen_w [winfo screenwidth $canvas_path]
    set screen_h [winfo screenheight $canvas_path]
    set img_w [image width $photo_image]
    set img_h [image height $photo_image]

    if {$img_w <= 0 || $img_h <= 0} {
        puts stderr "[coffee_screensaver] Invalid image dimensions"
        return
    }

    set scale [::plugins::coffee_screensaver::compute_cover_scale $img_w $img_h $screen_w $screen_h]
    set scaled [::plugins::coffee_screensaver::get_scaled_image $photo_image $scale]

    $canvas_path delete all
    $canvas_path create rectangle 0 0 $screen_w $screen_h -fill black -outline ""
    $canvas_path create image [expr {$screen_w / 2}] [expr {$screen_h / 2}] \
        -image $scaled -anchor center -tags {current_photo}

    ::plugins::coffee_screensaver::update_caption $canvas_path $photo_metadata
}

proc ::plugins::coffee_screensaver::compute_cover_scale {img_w img_h screen_w screen_h} {
    set scale_w [expr {double($screen_w) / double($img_w)}]
    set scale_h [expr {double($screen_h) / double($img_h)}]
    return [expr {max($scale_w, $scale_h)}]
}

proc ::plugins::coffee_screensaver::get_scaled_image {image_ref scale_factor} {
    if {$scale_factor <= 0} {
        return $image_ref
    }

    set target_width [expr {ceil([image width $image_ref] * $scale_factor)}]
    set target_height [expr {ceil([image height $image_ref] * $scale_factor)}]
    if {$target_width < 1 || $target_height < 1} {
        return $image_ref
    }

    set scaled_name ::plugins::coffee_screensaver::scaled
    if {[image exists $scaled_name]} {
        image delete $scaled_name
    }
    set scaled [image create photo -name $scaled_name -width $target_width -height $target_height]
    $scaled copy $image_ref -zoom 1 1 -subsample 1 1 -to 0 0 $target_width $target_height
    return $scaled
}

proc ::plugins::coffee_screensaver::update_caption {canvas photo_metadata} {
    if {![dict exists $photo_metadata user name]} {
        return
    }

    set credit [dict get $photo_metadata user name]
    if {[dict exists $photo_metadata links html]} {
        append credit " | " [dict get $photo_metadata links html]
    }

    set screen_w [winfo screenwidth $canvas]
    set screen_h [winfo screenheight $canvas]
    set y_offset [expr {$screen_h - 60}]

    $canvas create rectangle 0 [expr {$y_offset - 30}] $screen_w [expr {$y_offset + 30}] \
        -fill "#000000" -stipple gray25 -outline "" -tags {credit_bg}
    $canvas create text [expr {$screen_w / 2}] $y_offset \
        -text $credit -fill white -font {Helvetica 16} -tags {credit_text}
}

proc ::plugins::coffee_screensaver::show {} {
    variable canvas_path

    if {$canvas_path ne "" && [winfo exists $canvas_path]} {
        return
    }

    set top .coffee_screensaver
    if {[winfo exists $top]} {
        destroy $top
    }
    toplevel $top
    wm attributes $top -fullscreen 1
    wm attributes $top -topmost 1
    wm overrideredirect $top 1

    set canvas_path $top.c
    canvas $canvas_path -highlightthickness 0 -background black
    pack $canvas_path -fill both -expand 1

    bind $top <Any-KeyPress> ::plugins::coffee_screensaver::stop
    bind $top <ButtonPress> ::plugins::coffee_screensaver::stop
}

proc ::plugins::coffee_screensaver::hide {} {
    variable canvas_path

    if {$canvas_path eq ""} {
        return
    }
    set top [winfo toplevel $canvas_path]
    if {[winfo exists $top]} {
        destroy $top
    }
    set canvas_path ""
}

namespace eval ::plugins::coffee_screensaver::CFG {
    variable widgets
    array set widgets {}
    variable data
    array set data {}
    variable page_initialized 0
}

proc ::plugins::coffee_screensaver::CFG::setup_ui {} {
    variable page_initialized
    if {$page_initialized} {
        return
    }

    if {[info commands ::plugins::DGUI::add_page] eq ""} {
        return
    }

    set page [namespace current]

    ::plugins::coffee_screensaver::ensure_settings_loaded
    ::plugins::coffee_screensaver::CFG::sync_data_from_settings

    ::plugins::DGUI::add_page $page -title [::plugins::coffee_screensaver::tr "Coffee Screensaver Settings"]

    ::plugins::DGUI::add_text $page 320 220 [::plugins::coffee_screensaver::tr \
        "Configure how the Unsplash coffee screensaver fetches and updates imagery."] \
        -width 900 -justify left

    ::plugins::DGUI::add_entry $page api_key 320 360 1280 360 64 \
        -label [::plugins::coffee_screensaver::tr "Unsplash access key"] \
        -textvariable ::plugins::coffee_screensaver::CFG::data(api_key)

    ::plugins::DGUI::add_entry $page search_term 320 520 980 520 32 \
        -label [::plugins::coffee_screensaver::tr "Search term"] \
        -textvariable ::plugins::coffee_screensaver::CFG::data(search_term)

    ::plugins::DGUI::add_entry $page refresh_minutes 320 680 620 680 8 \
        -label [::plugins::coffee_screensaver::tr "Refresh interval (minutes)"] \
        -textvariable ::plugins::coffee_screensaver::CFG::data(refresh_minutes) \
        -data_type numeric -n_decimals 2

    ::plugins::DGUI::add_text $page 320 840 [::plugins::coffee_screensaver::tr \
        "Leave the access key blank to fall back to the UNSPLASH_ACCESS_KEY environment variable."] \
        -width 900 -justify left -fill $::plugins::DGUI::remark_color

    ::add_de1_action $page ::plugins::coffee_screensaver::CFG::show_page

    set page_initialized 1
}

proc ::plugins::coffee_screensaver::CFG::sync_data_from_settings {} {
    variable data
    ::plugins::coffee_screensaver::ensure_settings_loaded

    set data(api_key) $::plugins::coffee_screensaver::settings(api_key)
    set data(search_term) $::plugins::coffee_screensaver::settings(search_term)
    set data(refresh_minutes) $::plugins::coffee_screensaver::settings(refresh_minutes)
}

proc ::plugins::coffee_screensaver::CFG::commit {} {
    variable data

    ::plugins::coffee_screensaver::ensure_settings_loaded

    set ::plugins::coffee_screensaver::settings(api_key) [string trim $data(api_key)]
    set ::plugins::coffee_screensaver::settings(search_term) [string trim $data(search_term)]
    set ::plugins::coffee_screensaver::settings(refresh_minutes) [string trim $data(refresh_minutes)]

    ::plugins::coffee_screensaver::settings_updated
}

proc ::plugins::coffee_screensaver::CFG::show_page {} {
    ::plugins::coffee_screensaver::CFG::sync_data_from_settings
}

proc ::plugins::coffee_screensaver::CFG::page_done {} {
    ::plugins::coffee_screensaver::CFG::commit

    if {[info commands say] ne ""} {
        set sound ""
        if {[info exists ::settings(sound_button_in)]} {
            set sound $::settings(sound_button_in)
        }
        say [::plugins::coffee_screensaver::tr {Done}] $sound
    }
    if {[info commands page_to_show_when_off] ne ""} {
        page_to_show_when_off extensions
    }
}

proc ::plugins::coffee_screensaver::CFG::page_cancel {} {
    if {[info commands say] ne ""} {
        set sound ""
        if {[info exists ::settings(sound_button_out)]} {
            set sound $::settings(sound_button_out)
        }
        say [::plugins::coffee_screensaver::tr {Cancel}] $sound
    }
    if {[info commands page_to_show_when_off] ne ""} {
        page_to_show_when_off extensions
    }
}
