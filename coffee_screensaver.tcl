# Unsplash Coffee Screensaver plugin for the Decent DE1 tablet app.
#
# This plugin keeps a directory of Unsplash images (filtered by the configured
# search term) and points the stock DE1 screensaver at that directory. The DE1
# screensaver framework then handles showing and rotating the images. The plugin
# also exposes a simple configuration page built with the native DUI helpers so
# that no external GUI framework is required.

namespace eval ::plugins::coffee_screensaver {
    # Metadata shown in the Extensions list.
    variable author "Generated by Codex"
    variable contact ""
    variable version "1.3.0"
    variable description "Downloads coffee-themed Unsplash photos and uses them as the idle screen saver."
    variable name "Unsplash Coffee Screensaver"
    variable canonical_name "coffee_screensaver"
    variable actual_plugin_id [file tail [file normalize [file dirname [info script]]]]

    # Core paths and runtime state.
    variable base_dir [file normalize [file dirname [info script]]]
    variable image_root ""
    variable hi_res_dir ""
    variable refresh_timer ""
    variable refresh_interval_ms [expr {5 * 60 * 1000}]
    variable cache_limit 20
    variable running 0
    variable settings_loaded 0
    variable http_registered 0
    variable last_downloaded ""

    # User configurable settings, persisted via the plugin settings store.
    array set settings {
        api_key ""
        search_term "coffee"
        refresh_minutes 5.0
        cache_limit 20
    }
}

proc ::plugins::coffee_screensaver::tr {text} {
    if {[info commands translate] ne ""} {
        return [translate $text]
    }
    return $text
}

proc ::plugins::coffee_screensaver::log {msg} {
    if {[info commands msg] ne ""} {
        msg -NOTICE "::plugins::coffee_screensaver" $msg
    } else {
        puts stderr "[coffee_screensaver] $msg"
    }
}

proc ::plugins::coffee_screensaver::prepare_storage {} {
    variable image_root
    variable hi_res_dir
    variable base_dir

    if {$image_root eq ""} {
        set image_root [file join $base_dir cache]
    }
    if {$hi_res_dir eq ""} {
        set hi_res_dir [file join $image_root "2560x1600"]
    }

    foreach dir [list $image_root $hi_res_dir] {
        if {![file exists $dir]} {
            file mkdir $dir
        }
    }
}

proc ::plugins::coffee_screensaver::setup_http {} {
    variable http_registered
    if {$http_registered} {
        return
    }

    if {[catch {package require http} err]} {
        error "Unable to load http package: $err"
    }
    if {[catch {package require tls} err]} {
        ::plugins::coffee_screensaver::log "TLS package not available; Unsplash requests may fail"
    } else {
        set cafile ""
        if {[info commands homedir] ne ""} {
            set candidate "[homedir]/allcerts.pem"
            if {[file exists $candidate]} {
                set cafile $candidate
            }
        }

        if {[info commands ::tls::init] ne ""} {
            if {$cafile ne ""} {
                catch {::tls::init -cafile $cafile}
            } else {
                catch {::tls::init}
            }
        }

        ::http::register https 443 ::plugins::coffee_screensaver::https_socket
    }

    ::http::config -useragent "DE1 Unsplash Screensaver/1.2"
    set http_registered 1
}

proc ::plugins::coffee_screensaver::https_socket {args} {
    if {[info commands ::tls::socket] eq ""} {
        return -code error "tls::socket not available"
    }

    if {[llength $args] < 2} {
        return -code error "insufficient arguments for https socket"
    }

    set host [lindex $args end-1]
    set port [lindex $args end]
    set options {}
    if {[llength $args] > 2} {
        set options [lrange $args 0 end-2]
    }

    set base_cmd [list ::tls::socket]
    if {[llength $options] > 0} {
        set base_cmd [concat $base_cmd $options]
    }

    set sni_cmd [concat $base_cmd [list -servername $host $host $port]]
    if {![catch {uplevel #0 $sni_cmd} sock]} {
        return $sock
    }

    set fallback_cmd [concat $base_cmd [list $host $port]]
    if {[catch {uplevel #0 $fallback_cmd} sock]} {
        return -code error $sock
    }
    return $sock
}

proc ::plugins::coffee_screensaver::settings_file_path {} {
    variable base_dir
    return [file join $base_dir "settings.tcl"]
}

proc ::plugins::coffee_screensaver::read_settings_file {} {
    set path [::plugins::coffee_screensaver::settings_file_path]
    if {![file exists $path]} {
        return
    }
    if {[catch {source $path} err]} {
        ::plugins::coffee_screensaver::log "Failed to read settings fallback file: $err"
    }
}

proc ::plugins::coffee_screensaver::write_settings_file {} {
    variable settings
    set path [::plugins::coffee_screensaver::settings_file_path]
    set script "namespace eval ::plugins::coffee_screensaver { array set settings {[array get settings]} }\n"
    if {[catch {
        set fh [open $path w]
        puts $fh $script
        close $fh
    } err]} {
        ::plugins::coffee_screensaver::log "Failed to write settings fallback file: $err"
    }
}

proc ::plugins::coffee_screensaver::persist_settings {} {
    if {[info commands save_plugin_settings] ne ""} {
        catch {save_plugin_settings coffee_screensaver}
    } else {
        ::plugins::coffee_screensaver::write_settings_file
    }
}

proc ::plugins::coffee_screensaver::ensure_settings_loaded {} {
    variable settings_loaded
    if {$settings_loaded} {
        return
    }

    if {[info commands load_plugin_settings] ne ""} {
        catch {load_plugin_settings coffee_screensaver}
    } else {
        ::plugins::coffee_screensaver::read_settings_file
    }

    ::plugins::coffee_screensaver::check_settings
    ::plugins::coffee_screensaver::apply_settings
    set settings_loaded 1
}

proc ::plugins::coffee_screensaver::check_settings {} {
    variable settings
    foreach {key default} {api_key "" search_term "coffee" refresh_minutes 5.0 cache_limit 20} {
        if {![info exists settings($key)] || $settings($key) eq ""} {
            set settings($key) $default
        }
    }
}

proc ::plugins::coffee_screensaver::normalize_minutes {value} {
    if {[string is double -strict $value]} {
        set minutes [expr {double($value)}]
    } else {
        set minutes 5.0
    }
    if {$minutes < 0.5} {
        set minutes 0.5
    }
    return $minutes
}

proc ::plugins::coffee_screensaver::normalize_cache_limit {value} {
    if {[string is integer -strict $value]} {
        set limit $value
    } elseif {[string is double -strict $value]} {
        set limit [expr {int(floor($value))}]
    } else {
        set limit 20
    }
    if {$limit < 1} {
        set limit 1
    }
    return $limit
}

proc ::plugins::coffee_screensaver::apply_settings {} {
    variable settings
    variable refresh_interval_ms
    variable cache_limit

    set search [string trim $settings(search_term)]
    if {$search eq ""} {
        set search "coffee"
    }
    set settings(search_term) $search

    set minutes [::plugins::coffee_screensaver::normalize_minutes $settings(refresh_minutes)]
    set settings(refresh_minutes) $minutes
    set refresh_interval_ms [expr {round($minutes * 60 * 1000)}]

    set limit [::plugins::coffee_screensaver::normalize_cache_limit $settings(cache_limit)]
    set settings(cache_limit) $limit
    set cache_limit $limit
}

proc ::plugins::coffee_screensaver::settings_updated {} {
    ::plugins::coffee_screensaver::apply_settings
    ::plugins::coffee_screensaver::persist_settings
    ::plugins::coffee_screensaver::start_refresh_loop 1
}

proc ::plugins::coffee_screensaver::resolve_api_key {} {
    variable settings
    if {[info exists settings(api_key)] && $settings(api_key) ne ""} {
        return $settings(api_key)
    }
    if {[info exists ::env(UNSPLASH_ACCESS_KEY)]} {
        return $::env(UNSPLASH_ACCESS_KEY)
    }
    return ""
}

proc ::plugins::coffee_screensaver::fetch_random_image {api_key} {
    variable settings
    variable hi_res_dir

    set endpoint "https://api.unsplash.com/photos/random"
    set query [::http::formatQuery query $settings(search_term) orientation landscape count 1]
    set headers [list Authorization "Client-ID $api_key" Accept-Version "v1" Accept "application/json"]

    set token [::http::geturl "$endpoint?$query" -headers $headers -timeout 30000]
    try {
        if {[::http::status $token] ne "ok"} {
            error "HTTP [::http::code $token]"
        }
        set body [::http::data $token]
    } finally {
        ::http::cleanup $token
    }

    if {[catch {package require json} err]} {
        error "Unable to load json package: $err"
    }

    set parsed [::json::json2dict $body]
    if {[catch {dict size $parsed}]} {
        set photo_dict [lindex $parsed 0]
    } else {
        set photo_dict $parsed
    }

    if {![dict exists $photo_dict urls full]} {
        error "Unexpected JSON payload from Unsplash"
    }

    set image_url [dict get $photo_dict urls full]
    set file_name [format "unsplash_%s.jpg" [dict get $photo_dict id]]
    set image_path [file join $hi_res_dir $file_name]

    ::plugins::coffee_screensaver::prune_cache 1

    ::plugins::coffee_screensaver::download_binary $image_url $image_path
    ::plugins::coffee_screensaver::prune_cache 0
    return [list $image_path $photo_dict]
}

proc ::plugins::coffee_screensaver::download_binary {url destination} {
    set token [::http::geturl $url -binary 1 -timeout 60000]
    try {
        if {[::http::status $token] ne "ok"} {
            error "HTTP [::http::code $token]"
        }
        set data [::http::data $token]
    } finally {
        ::http::cleanup $token
    }

    set fh [open $destination w+b]
    try {
        fconfigure $fh -translation binary
        puts -nonewline $fh $data
    } finally {
        close $fh
    }
}

proc ::plugins::coffee_screensaver::prune_cache {{reserve 0}} {
    variable hi_res_dir
    variable cache_limit

    if {![file exists $hi_res_dir]} {
        return
    }

    set limit [expr {int($cache_limit)}]
    if {$limit < 1} {
        set limit 1
    }

    set max_keep [expr {$limit - $reserve}]
    if {$max_keep < 0} {
        set max_keep 0
    }

    set files [glob -nocomplain -tails -directory $hi_res_dir *.jpg]
    if {$files eq ""} {
        return
    }

    set full_paths {}
    foreach f $files {
        set path [file join $hi_res_dir $f]
        lappend full_paths [list [file mtime $path] $path]
    }

    set sorted [lsort -integer -increasing -index 0 $full_paths]
    set excess_count [expr {[llength $sorted] - $max_keep}]
    if {$excess_count <= 0} {
        return
    }

    set to_remove [lrange $sorted 0 [expr {$excess_count - 1}]]
    foreach item $to_remove {
        set path [lindex $item 1]
        catch {file delete -force $path}
    }
}

proc ::plugins::coffee_screensaver::update_saver_display {message} {
    variable last_downloaded
    set last_downloaded $message

    unset -nocomplain ::saver_files_cache
    if {[info commands change_screen_saver_img] ne ""} {
        catch {change_screen_saver_img}
    }
}

proc ::plugins::coffee_screensaver::refresh_image {{manual 0}} {
    variable running
    variable refresh_interval_ms

    if {![info exists running] || !$running} {
        return
    }

    set api_key [::plugins::coffee_screensaver::resolve_api_key]
    if {$api_key eq ""} {
        ::plugins::coffee_screensaver::update_saver_display [::plugins::coffee_screensaver::tr "Unsplash access key missing"]
        ::plugins::coffee_screensaver::log "Unsplash access key not configured; skipping fetch"
        ::plugins::coffee_screensaver::schedule_refresh
        return
    }

    if {[catch {::plugins::coffee_screensaver::fetch_random_image $api_key} result]} {
        ::plugins::coffee_screensaver::log "Unsplash fetch failed: $result"
        ::plugins::coffee_screensaver::update_saver_display "Fetch failed: $result"
        ::plugins::coffee_screensaver::schedule_refresh
        return
    }

    lassign $result image_path metadata
    ::plugins::coffee_screensaver::set_screen_saver_directory

    set photographer ""
    if {[dict exists $metadata user name]} {
        set photographer [dict get $metadata user name]
    }
    set link ""
    if {[dict exists $metadata links html]} {
        set link [dict get $metadata links html]
    }

    set msg "[clock format [clock seconds] -format {%Y-%m-%d %H:%M}]"
    if {$photographer ne ""} {
        append msg " — $photographer"
    }
    if {$link ne ""} {
        append msg " | $link"
    }
    ::plugins::coffee_screensaver::update_saver_display $msg

    ::plugins::coffee_screensaver::schedule_refresh
}

proc ::plugins::coffee_screensaver::schedule_refresh {} {
    variable refresh_timer
    variable refresh_interval_ms

    ::plugins::coffee_screensaver::cancel_refresh
    set refresh_timer [after $refresh_interval_ms {::plugins::coffee_screensaver::refresh_image}]
}

proc ::plugins::coffee_screensaver::cancel_refresh {} {
    variable refresh_timer
    if {$refresh_timer ne ""} {
        catch {after cancel $refresh_timer}
        set refresh_timer ""
    }
}

proc ::plugins::coffee_screensaver::start_refresh_loop {{immediate 0}} {
    variable running
    if {$running} {
        if {$immediate} {
            ::plugins::coffee_screensaver::refresh_image 1
        }
        return
    }
    set running 1
    if {$immediate} {
        ::plugins::coffee_screensaver::refresh_image 1
    } else {
        ::plugins::coffee_screensaver::schedule_refresh
    }
}

proc ::plugins::coffee_screensaver::stop_refresh_loop {} {
    variable running
    if {!$running} {
        return
    }
    set running 0
    ::plugins::coffee_screensaver::cancel_refresh
}

proc ::plugins::coffee_screensaver::set_screen_saver_directory {} {
    variable image_root
    ::plugins::coffee_screensaver::prepare_storage

    if {[info commands set_de1_screen_saver_directory] ne ""} {
        set_de1_screen_saver_directory $image_root
        unset -nocomplain ::saver_files_cache
    }
}

proc ::plugins::coffee_screensaver::apply_settings_from_ui {} {
    ::plugins::coffee_screensaver::settings_updated
    ::plugins::coffee_screensaver::update_saver_display [::plugins::coffee_screensaver::tr "Settings saved"]
}

proc ::plugins::coffee_screensaver::fetch_now {} {
    ::plugins::coffee_screensaver::start_refresh_loop 1
    ::plugins::coffee_screensaver::update_saver_display [::plugins::coffee_screensaver::tr "Fetching new image..."]
}

proc ::plugins::coffee_screensaver::establish_alias {plugin_id} {
    variable canonical_name

    if {$plugin_id eq "" || $plugin_id eq $canonical_name} {
        return
    }

    set source_namespace ::plugins::coffee_screensaver
    set target_namespace ::plugins::${plugin_id}

    if {![namespace exists $target_namespace]} {
        namespace eval $target_namespace {}
    }

    foreach var {author contact version description name base_dir image_root hi_res_dir refresh_timer refresh_interval_ms running settings_loaded http_registered last_downloaded canonical_name actual_plugin_id} {
        namespace eval $target_namespace [list namespace upvar $source_namespace $var $var]
    }

    foreach var {plugin_peeked plugin_loaded} {
        namespace eval $target_namespace [list namespace upvar $source_namespace $var $var]
    }

    namespace eval $target_namespace [list namespace upvar $source_namespace settings settings]

    foreach proc_name [info procs ${source_namespace}::*] {
        set short_name [namespace tail $proc_name]
        if {$short_name eq "establish_alias"} {
            continue
        }
        if {[namespace which ${target_namespace}::$short_name] eq ""} {
            interp alias {} ${target_namespace}::$short_name {} $proc_name
        }
    }
}

proc ::plugins::coffee_screensaver::build_ui {} {
    ::plugins::coffee_screensaver::ensure_settings_loaded

    set page "plugin_coffee_screensaver"
    add_de1_page $page "settings_message.png" "default"

    add_de1_text $page 1280 300 \
        -text [::plugins::coffee_screensaver::tr "Unsplash Coffee Screensaver"] \
        -font Helv_20_bold -width 1200 -fill "#444444" -anchor "center" -justify "center"

    # Done button
    dui add dbutton $page 1030 1250 1530 1370 \
        -shape round -radius 30 \
        -command { \
            say [translate {Done}] $::settings(sound_button_in); \
            ::plugins::coffee_screensaver::apply_settings_from_ui; \
            page_to_show_when_off extensions \
        } \
        -label [translate "Done"] \
        -label_font Helv_10_bold -label_fill "#fAfBff"

    # Apply button
    dui add dbutton $page 430 1250 930 1370 \
        -shape round -radius 30 \
        -command { \
            say [translate {Apply}] $::settings(sound_button_in); \
            ::plugins::coffee_screensaver::apply_settings_from_ui \
        } \
        -label [translate "Apply"] \
        -label_font Helv_10_bold -label_fill "#fAfBff"

    # Fetch-now button
    dui add dbutton $page 1630 1250 2130 1370 \
        -shape round -radius 30 \
        -command { \
            say [translate {Refresh}] $::settings(sound_button_in); \
            ::plugins::coffee_screensaver::fetch_now \
        } \
        -label [translate "Refresh"] \
        -label_font Helv_10_bold -label_fill "#fAfBff"

    set entry_x 880
    set entry_y 520
    set y_step 180

    add_de1_text $page $entry_x [expr {$entry_y - 80}] -font Helv_10_bold -width 700 \
        -anchor "w" -justify "left" \
        -text [::plugins::coffee_screensaver::tr "Unsplash access key"]
    add_de1_widget $page entry $entry_x $entry_y {} \
        -font Helv_8 -width 40 -canvas_anchor "w" \
        -borderwidth 1 -bg #fbfaff -foreground #4e85f4 \
        -textvariable ::plugins::coffee_screensaver::settings(api_key) \
        -relief flat -highlightthickness 1 -highlightcolor #000000

    set entry_y [expr {$entry_y + $y_step}]
    add_de1_text $page $entry_x [expr {$entry_y - 80}] -font Helv_10_bold -width 700 \
        -anchor "w" -justify "left" \
        -text [::plugins::coffee_screensaver::tr "Search term"]
    add_de1_widget $page entry $entry_x $entry_y {} \
        -font Helv_8 -width 30 -canvas_anchor "w" \
        -borderwidth 1 -bg #fbfaff -foreground #4e85f4 \
        -textvariable ::plugins::coffee_screensaver::settings(search_term) \
        -relief flat -highlightthickness 1 -highlightcolor #000000

    set entry_y [expr {$entry_y + $y_step}]
    add_de1_text $page $entry_x [expr {$entry_y - 80}] -font Helv_10_bold -width 700 \
        -anchor "w" -justify "left" \
        -text [::plugins::coffee_screensaver::tr "Refresh interval (minutes)"]
    add_de1_widget $page entry $entry_x $entry_y {} \
        -font Helv_8 -width 10 -canvas_anchor "w" \
        -borderwidth 1 -bg #fbfaff -foreground #4e85f4 \
        -textvariable ::plugins::coffee_screensaver::settings(refresh_minutes) \
        -validate key \
        -vcmd [list ::dui::validate_numeric %P 0 0 999] \
        -relief flat -highlightthickness 1 -highlightcolor #000000

    set entry_y [expr {$entry_y + $y_step}]
    add_de1_text $page $entry_x [expr {$entry_y - 80}] -font Helv_10_bold -width 700 \
        -anchor "w" -justify "left" \
        -text [::plugins::coffee_screensaver::tr "Max cached images"]
    add_de1_widget $page entry $entry_x $entry_y {} \
        -font Helv_8 -width 10 -canvas_anchor "w" \
        -borderwidth 1 -bg #fbfaff -foreground #4e85f4 \
        -textvariable ::plugins::coffee_screensaver::settings(cache_limit) \
        -validate key \
        -vcmd [list ::dui::validate_numeric %P 0 1 999] \
        -relief flat -highlightthickness 1 -highlightcolor #000000

    add_de1_text $page 1280 1220 \
        -text [::plugins::coffee_screensaver::tr "Leave the key blank to fall back to the UNSPLASH_ACCESS_KEY environment variable."] \
        -font Helv_8 -width 1600 -fill #4e85f4 -anchor "center" -justify "center"

    add_de1_variable $page 1280 1340 \
        -font Helv_8 -width 1600 -fill #444444 -anchor "center" -justify "center" \
        -textvariable ::plugins::coffee_screensaver::last_downloaded

    return $page
}

proc ::plugins::coffee_screensaver::activate {} {
    ::plugins::coffee_screensaver::prepare_storage
    ::plugins::coffee_screensaver::setup_http
    ::plugins::coffee_screensaver::ensure_settings_loaded
    ::plugins::coffee_screensaver::set_screen_saver_directory
    ::plugins::coffee_screensaver::start_refresh_loop 1
}

proc ::plugins::coffee_screensaver::deactivate {} {
    ::plugins::coffee_screensaver::stop_refresh_loop
}

proc ::plugins::coffee_screensaver::main {} {
    ::plugins::coffee_screensaver::activate
    plugins gui coffee_screensaver [::plugins::coffee_screensaver::build_ui]
}

proc ::plugins::coffee_screensaver::unload {} {
    ::plugins::coffee_screensaver::deactivate
}

::plugins::coffee_screensaver::establish_alias $::plugins::coffee_screensaver::actual_plugin_id
